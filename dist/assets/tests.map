{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","demoapp/tests/adapters/user.lint-test.js","demoapp/tests/app.lint-test.js","demoapp/tests/components/user-show.lint-test.js","demoapp/tests/controllers/users.lint-test.js","demoapp/tests/helpers/destroy-app.js","demoapp/tests/helpers/destroy-app.lint-test.js","demoapp/tests/helpers/module-for-acceptance.js","demoapp/tests/helpers/module-for-acceptance.lint-test.js","demoapp/tests/helpers/resolver.js","demoapp/tests/helpers/resolver.lint-test.js","demoapp/tests/helpers/start-app.js","demoapp/tests/helpers/start-app.lint-test.js","demoapp/tests/integration/components/user-show-test.js","demoapp/tests/integration/components/user-show-test.lint-test.js","demoapp/tests/models/user.lint-test.js","demoapp/tests/resolver.lint-test.js","demoapp/tests/router.lint-test.js","demoapp/tests/routes/users.lint-test.js","demoapp/tests/test-helper.js","demoapp/tests/test-helper.lint-test.js","demoapp/tests/unit/adapters/user-test.js","demoapp/tests/unit/adapters/user-test.lint-test.js","demoapp/tests/unit/controllers/users-test.js","demoapp/tests/unit/controllers/users-test.lint-test.js","demoapp/tests/unit/models/user-test.js","demoapp/tests/unit/models/user-test.lint-test.js","demoapp/tests/unit/routes/users-test.js","demoapp/tests/unit/routes/users-test.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('demoapp/tests/adapters/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/components/user-show.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/user-show.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/user-show.js should pass ESLint.\\n6:4  - Unexpected console statement. (no-console)');\n  });\n});","define('demoapp/tests/controllers/users.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/users.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('demoapp/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'demoapp/tests/helpers/start-app', 'demoapp/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _demoappTestsHelpersStartApp, _demoappTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _demoappTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _demoappTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('demoapp/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/helpers/resolver', ['exports', 'demoapp/resolver', 'demoapp/config/environment'], function (exports, _demoappResolver, _demoappConfigEnvironment) {\n\n  var resolver = _demoappResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _demoappConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _demoappConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('demoapp/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/helpers/start-app', ['exports', 'ember', 'demoapp/app', 'demoapp/config/environment'], function (exports, _ember, _demoappApp, _demoappConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _demoappConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _demoappApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('demoapp/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/integration/components/user-show-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-show', 'Integration | Component | user show', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'SR7Po5hK',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"user-show\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '4k3YlT8r',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"user-show\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('demoapp/tests/integration/components/user-show-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/user-show-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/user-show-test.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/models/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/routes/users.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/users.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/users.js should pass ESLint.\\n13:4  - Unexpected console statement. (no-console)\\n17:4  - Unexpected console statement. (no-console)\\n24:5  - Unexpected console statement. (no-console)');\n  });\n});","define('demoapp/tests/test-helper', ['exports', 'demoapp/tests/helpers/resolver', 'ember-qunit'], function (exports, _demoappTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_demoappTestsHelpersResolver['default']);\n});","define('demoapp/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/unit/adapters/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:user', 'Unit | Adapter | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('demoapp/tests/unit/adapters/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/adapters/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/unit/controllers/users-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:users', 'Unit | Controller | users', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('demoapp/tests/unit/controllers/users-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/controllers/users-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/users-test.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('demoapp/tests/unit/models/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint.\\n');\n  });\n});","define('demoapp/tests/unit/routes/users-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:users', 'Unit | Route | users', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('demoapp/tests/unit/routes/users-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/routes/users-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/users-test.js should pass ESLint.\\n');\n  });\n});","require('demoapp/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;","file":"tests.js"}